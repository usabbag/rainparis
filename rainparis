#!/usr/bin/env python3
"""
Rain Paris CLI - Quick rain forecasts for Paris arrondissements
Usage: rainparis [arrondissement_number]
"""
import os
import sys
import argparse
import requests
from datetime import datetime
from dotenv import load_dotenv
from pathlib import Path

# Load .env from the script's directory
script_dir = Path(__file__).parent.absolute()
load_dotenv(script_dir / '.env')

API_KEY = os.getenv('TOMORROW_API_KEY')

# Import arrondissements data
sys.path.insert(0, str(script_dir))
from arrondissements import ARRONDISSEMENTS, get_arrondissement, get_coordinates


def format_rain_status(precip):
    """Format rain status with emoji"""
    if precip == 0:
        return "‚òÄÔ∏è  Dry"
    elif precip < 2.5:
        return "üå¶Ô∏è  Light rain"
    elif precip < 10:
        return "üåßÔ∏è  Moderate rain"
    else:
        return "‚õàÔ∏è  Heavy rain"


def generate_rain_summary(intervals):
    """Generate DarkSky-style rain summary"""
    current_precip = intervals[0]['values'].get('precipitationIntensity', 0)

    # Find when rain starts or stops
    for i, interval in enumerate(intervals):
        precip = interval['values'].get('precipitationIntensity', 0)

        if current_precip == 0 and precip > 0:
            return f"‚òî Rain starting in {i} minute{'s' if i != 1 else ''}"
        elif current_precip > 0 and precip == 0:
            return f"‚ú® Rain stopping in {i} minute{'s' if i != 1 else ''}"

    if current_precip > 0:
        return "üåßÔ∏è  Rain for the next hour"
    else:
        return "‚òÄÔ∏è  No rain expected in the next hour"


def get_weather_data(arr_number):
    """Fetch weather data for an arrondissement"""
    coords = get_coordinates(arr_number)
    if not coords:
        print(f"‚ùå Invalid arrondissement number: {arr_number}")
        print(f"   Please use a number between 1 and 20")
        sys.exit(1)

    lat, lon = coords
    arr_data = get_arrondissement(arr_number)

    # Fetch realtime weather
    realtime_url = "https://api.tomorrow.io/v4/weather/realtime"
    realtime_params = {
        "location": f"{lat},{lon}",
        "apikey": API_KEY
    }

    try:
        realtime_response = requests.get(realtime_url, params=realtime_params, timeout=10)
        realtime_response.raise_for_status()
        realtime_data = realtime_response.json()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error fetching weather data: {e}")
        sys.exit(1)

    # Fetch minutely forecast
    timeline_url = "https://api.tomorrow.io/v4/timelines"
    timeline_params = {
        "location": f"{lat},{lon}",
        "fields": "precipitationIntensity,precipitationProbability",
        "timesteps": "1m",
        "startTime": "now",
        "endTime": "nowPlus1h",
        "units": "metric",
        "timezone": "Europe/Paris",
        "apikey": API_KEY
    }

    try:
        timeline_response = requests.get(timeline_url, params=timeline_params, timeout=10)
        timeline_response.raise_for_status()
        timeline_data = timeline_response.json()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error fetching forecast data: {e}")
        sys.exit(1)

    return arr_data, realtime_data, timeline_data


def display_weather(arr_number, verbose=False):
    """Display weather information for an arrondissement"""
    arr_data, realtime_data, timeline_data = get_weather_data(arr_number)

    # Extract data
    current_values = realtime_data['data']['values']
    temp = current_values.get('temperature')
    precip = current_values.get('precipitationIntensity', 0)
    intervals = timeline_data['data']['timelines'][0]['intervals']

    # Generate summary
    summary = generate_rain_summary(intervals)

    # Display compact output
    print()
    print(f"üìç {arr_data['name']}, Paris")
    print(f"üå°Ô∏è  {temp}¬∞C")
    print(f"{format_rain_status(precip)} ({precip:.1f} mm/hr)")
    print(f"{summary}")
    print()

    # Verbose mode: show next 10 minutes
    if verbose:
        print("Next 10 minutes:")
        print("-" * 40)
        for i, interval in enumerate(intervals[:10]):
            time = datetime.fromisoformat(interval['startTime'].replace('Z', '+00:00'))
            int_precip = interval['values'].get('precipitationIntensity', 0)
            prob = interval['values'].get('precipitationProbability', 0)

            icon = "üåßÔ∏è" if int_precip > 0 else "  "
            print(f"{icon} {time.strftime('%H:%M')}  {int_precip:5.2f} mm/hr  ({prob:3d}%)")
        print()

    # Footer
    print(f"Updated: {datetime.now().strftime('%H:%M')}")
    print()


def list_arrondissements():
    """List all available arrondissements"""
    print()
    print("Paris Arrondissements:")
    print("-" * 50)
    for num in range(1, 21):
        arr = get_arrondissement(num)
        print(f"  {num:2d}. {arr['name']}")
    print()


def main():
    """Main CLI entry point"""
    parser = argparse.ArgumentParser(
        description="Rain Paris - Minute-by-minute rain forecasts for Paris",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  rainparis 2              Check weather for 2nd arrondissement
  rainparis 11 -v          Detailed forecast for 11th arrondissement
  rainparis --list         Show all arrondissements

Get your free API key at https://www.tomorrow.io/
Add it to .env file: TOMORROW_API_KEY=your_key_here
        """
    )

    parser.add_argument(
        'arrondissement',
        nargs='?',
        type=int,
        help='Arrondissement number (1-20)'
    )

    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Show detailed minute-by-minute forecast'
    )

    parser.add_argument(
        '-l', '--list',
        action='store_true',
        help='List all arrondissements'
    )

    args = parser.parse_args()

    # Check for API key
    if not API_KEY:
        print("‚ùå Error: TOMORROW_API_KEY not found")
        print("   Create a .env file with: TOMORROW_API_KEY=your_key_here")
        print("   Get a free key at: https://www.tomorrow.io/")
        sys.exit(1)

    # Handle --list
    if args.list:
        list_arrondissements()
        sys.exit(0)

    # Require arrondissement number
    if args.arrondissement is None:
        parser.print_help()
        sys.exit(0)

    # Validate arrondissement number
    if args.arrondissement < 1 or args.arrondissement > 20:
        print(f"‚ùå Invalid arrondissement: {args.arrondissement}")
        print("   Please use a number between 1 and 20")
        print("   Use 'rainparis --list' to see all arrondissements")
        sys.exit(1)

    # Display weather
    display_weather(args.arrondissement, verbose=args.verbose)


if __name__ == '__main__':
    main()
